default namespace = ""

start =
	element models {
		
		## version of file format
		attribute version {
			xsd:string { pattern = "[0-9]+\.[0-9]+" }
		},
		element project {
			attribute type { "project" },
			attribute id { xsd:ID },
			element keys {
				attribute remoteId { xsd:ID }
			}?,
			element attributes {
				attribute paratextShortName { xsd:string }?
				| attribute paratextName { xsd:string }?
				| attribute paratextGuid { xsd:string }?
				| attribute languageBcp47 {
							xsd:string { pattern = "[a-z]{2,3}(-[A-Za-z]{4})?(-[A-Z]{2})?(-[a-z]+)?" }
						}
				| attribute languageName { xsd:string }?
				| attribute defaultFontFamily { xsd:string }?
				| attribute fontFeatures { xsd:string }?
				| attribute defaultFontSize {
							"medium" | "xx-small" | "x-small" | "small" | "large" | "x-large" | "xx-large"
						}?
				| attribute textDirection { "ltr" | "rtl" }?
				| attribute autoSync { xsd:boolean }?
				| attribute allowClaiming { xsd:boolean }?
				| attribute nature {
							"Scripture" | "Scripture Story" | "Lexical" | "Didactic" | "Other" | "Test"
						}?
				| attribute destination { "audio" | "text" }?
			}?,
			element relationships {
				element passages {
					element data {
						attribute type { "passage" },
						attribute id { xsd:IDREF }
					}*
				}?
				| element users {
							element data {
								attribute type { "user" },
								attribute id { xsd:IDREF }
							}*
						}?
			}?
		}*,
		element passage {
			attribute type { "passage" },
			attribute id { xsd:ID },
			element keys {
				attribute remoteId { xsd:ID }
			}?,
			element attributes {
				(
					## BBB-CCC-ssseee, PPP=project, BBB=Book, CCC=Chapter, sss=start, eee=end
					attribute reference {
						xsd:string { pattern = "[a-zA-Z0-9]{3}-\d{3}-\d{3}\d{3}" }
					}?
					| attribute book { xsd:positiveInteger }?
					| attribute set { xsd:positiveInteger }?
					| attribute passage { xsd:positiveInteger }?
					| attribute position { xsd:decimal }?
					| attribute state { "Incomplete" | "Ready" | "Transcribe" | "Review" | "Upload" | "Complete" }
					| attribute hold { xsd:boolean }?),
				(
					## user friendly name
					element passageTitle { xsd:string }?
					| element version {
								(attribute number { xsd:positiveInteger }
									| attribute textQuality { "unacceptable" | "questionable" | "good" }?
									| attribute audioQuality { "redo" | "acceptable" | "high" }?
									| attribute eafName { xsd:string }?
									| attribute audioName { xsd:string }
									| attribute duration { xsd:nonNegativeInteger }),
								element transcription { xsd:string }?,
								element thread {
									(attribute startLocation { xsd:nonNegativeInteger }
										| attribute resolved { xsd:boolean }),
									element targetText { xsd:string },
									element comment {
										(
											## user
											attribute author { xsd:IDREF }
											| attribute sequence { xsd:positiveInteger }),
										element commentText { xsd:string }
									}+
								}?
							}*
					| element history {
								(
									## sequential number beginning at zero
									attribute historyEntry { xsd:positiveInteger }
									| 
											## date and time when it happened
											attribute datetime { xsd:dateTime }?
									| 
											## type of action completed
											attribute action {
												"Incomplete"
												| "Ready"
												| "Assigned"
												| "Unassigned"
												| "TranscribeStart"
												| "TranscribeEnd"
												| "ReviewStart"
												| "ReviewEnd"
												| "HoldStart"
												| "HoldEnd"
												| "Upload"
												| "Complete"
											}
									| 
											## user who is involved
											attribute userid { xsd:IDREF }),
								
								## comments may need to be required for tasks placed on hold
								element comment { xsd:string }?
							}*)
			}*,
			element relationships {
				element assignedTo {
					element data {
						attribute type { "user" },
						attribute id { xsd:IDREF }
					}
				}?
				| element lastTranscriber {
							element data {
								attribute type { "user" },
								attribute id { xsd:IDREF }
							}
						}?
				| element lastReviewer {
							element data {
								attribute type { "user" },
								attribute id { xsd:IDREF }
							}
						}?
			}?
		}*,
		element user {
			attribute type { "user" },
			attribute id { xsd:ID },
			element keys {
				attribute remoteId { xsd:ID }
			}?,
			element attributes {
				
				## unique user chosen name (without spaces)
				attribute id { xsd:NCName },
				(element fullName { xsd:string }?
					| 
							## identity tokens are reuired (if present) and for admin users
							element identityToken { xsd:string }?
					| element avatarName { xsd:string }?
					| element transcriberSettings {
								attribute lastProject {
									
									## project
									xsd:IDREF
								}?
								| 
										## BCP-47 value of UI language for transcriber
										attribute uiLanguageBcp47 {
											xsd:string { pattern = "[a-z]{2,3}(-[A-Za-z]{4})?(-[A-Z]{2})?(-[a-z]+)?" }
										}?
								| attribute timer { "countUp" | "countDown" }?
								| 
										## percentage between 25 and 200 for playback
										attribute playSpeed {
											xsd:integer { minInclusive = "25" maxInclusive = "200" }
										}?
								| attribute progressType { "bar" | "waveform" }?
								| element hotKey {
											attribute hotKeyType { "playPause" | "back" | "forward" | "slower" | "faster" },
											attribute keyCode { xsd:string }
										}*
							}?
					| element projectSettings {
								attribute projectId {
									
									## project
									xsd:IDREF
								}
								| attribute role { "admin" | "reviewer" | "transcriber" }
								| element fontFamily { xsd:string }?
								| attribute fontFeatures { xsd:string }?
								| element fontSize {
											"medium" | "xx-small" | "x-small" | "small" | "large" | "x-large" | "xx-large"
										}?
							}*
					| element knownLanguages {
								xsd:string { pattern = "[a-z]{2,3}(-[A-Za-z]{4})?(-[A-Z]{2})?(-[a-z]+)?" }
							}*)
			}
		}+,
		element transcriberTypes {
			element roleValues {
				attribute sequence {xsd:positiveInteger},
				attribute deacription { xsd:NCName}
				}*
			| element fontSizeValues {
				attribute sequence {xsd:positiveInteger},
				attribute deacription { xsd:NCName}
				}*
			| element natureValues {
				attribute sequence {xsd:positiveInteger},
				attribute deacription { xsd:NCName}
				}*
			| element destinationValues {
				attribute sequence {xsd:positiveInteger},
				attribute deacription { xsd:NCName}
				}*
			| element stateValues {
				attribute sequence {xsd:positiveInteger},
				attribute deacription { xsd:NCName}
				}*
			| element textQualitValues {
				attribute sequence {xsd:positiveInteger},
				attribute deacription { xsd:NCName}
				}*
			| element audioQualitValues {
				attribute sequence {xsd:positiveInteger},
				attribute deacription { xsd:NCName}
				}*
			| element historyActionValues {
				attribute sequence {xsd:positiveInteger},
				attribute deacription { xsd:NCName}
				}*
			| element timerValues {
				attribute sequence {xsd:positiveInteger},
				attribute deacription { xsd:NCName}
				}*
			| element textQualitValues {
				attribute sequence {xsd:positiveInteger},
				attribute deacription { xsd:NCName}
				}*
			| element hotKeyValues {
				attribute sequence {xsd:positiveInteger},
				attribute deacription { xsd:NCName}
				}*
		}
	}
